import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable, of } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
import { GeneralService } from './general';
// =============================
// üìç Modelo de datos de ubicaci√≥n
// =============================
export interface LocationData {
  city?: string;
  province?: string;
  lat?: number;
  lng?: number;
  address?: string;
}

@Injectable({ providedIn: 'root' })
export class LocationService {
  private location$ = new BehaviorSubject<LocationData | null>(null);

  constructor(private general: GeneralService) {
    // ‚úÖ Cargar ubicaci√≥n almacenada localmente
    if (typeof window !== 'undefined') {
      const saved = localStorage.getItem('mw_location');
      if (saved) this.location$.next(JSON.parse(saved));
    }
  }

  // =========================================================
  // üîπ Observable reactivo de ubicaci√≥n actual
  // =========================================================
  get current$(): Observable<LocationData | null> {
    return this.location$.asObservable();
  }

  // =========================================================
  // üîπ Obtener el valor actual (sincr√≥nico)
  // =========================================================
  getLocation(): LocationData | null {
    return this.location$.value;
  }

  // =========================================================
  // üîπ Actualizar la ubicaci√≥n manualmente (y guardar en local)
  // =========================================================
  setLocation(loc: LocationData) {
    if (typeof window !== 'undefined') {
      localStorage.setItem('mw_location', JSON.stringify(loc));
    }
    this.location$.next(loc);
  }

  // =========================================================
  // üîπ Detectar ubicaci√≥n desde el navegador (geolocalizaci√≥n)
  // =========================================================
  detectLocation(): Observable<LocationData | null> {
    if (!navigator.geolocation) {
      console.warn('‚ö†Ô∏è Geolocalizaci√≥n no soportada por el navegador.');
      return of(null);
    }

    return new Observable<LocationData | null>(observer => {
      navigator.geolocation.getCurrentPosition(
        position => {
          const loc: LocationData = {
            lat: position.coords.latitude,
            lng: position.coords.longitude,
          };
          this.setLocation(loc);
          observer.next(loc);
          observer.complete();
        },
        error => {
          console.error('‚ùå Error obteniendo ubicaci√≥n:', error);
          observer.next(null);
          observer.complete();
        }
      );
    });
  }

  // =========================================================
  // üîπ Enviar ubicaci√≥n al backend (opcional)
  // =========================================================
  saveToBackend(loc: LocationData): Observable<any> {
    return this.general.post<any>('location', loc).pipe(
      catchError(err => {
        console.error('‚ùå Error enviando ubicaci√≥n al backend:', err);
        return of({ success: false });
      })
    );
  }

  // =========================================================
  // üîπ Cargar ubicaci√≥n desde el backend (si hay login)
  // =========================================================
  loadFromBackend(): Observable<LocationData | null> {
    return this.general.get<any>('location').pipe(
      map(res => {
        const loc: LocationData = res?.location || null;
        if (loc) this.setLocation(loc);
        return loc;
      }),
      catchError(err => {
        console.error('‚ùå Error cargando ubicaci√≥n desde backend:', err);
        return of(null);
      })
    );
  }
}
